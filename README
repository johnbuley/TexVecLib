TexVecLib

This library allows for the transformation of a set of documents
to a tf-idf matrix.  The matrix can then be used as input for
the calculation of a cosine similarity matrix, for instance.
The output is in the form of a 2d-array, so it is agnostic
with respect to user's preferred linear algebra library.

term frequency(word w|doc d) = |occurrences of w in d|
inverse doc frequency(word) = log(|set of docs| / |docs in which w occurs|)
tf-idf = tf * idf

So a word that occurs in many documents will have a low score
when it occurs, and a word that occurs in few documents will
have a high score.  This can be used as a basic keyword-extraction
criterion. 


Requirements for building
---------------------------------------------------------------
Java SDK 1.8
JUnit and JAMA for test module


Components
---------------------------------------------------------------
class TfIdfVectorizer

  public void fit(List<String>, int, float)
  	      	
		Trains the model.
	
		List<String>  list of documents
		int	      min document frequency
			       i.e., the minimum number of documents 
			       in which a word must appear to be 
			       included in training set
		float	      max document frequency ratio
			       the max document frequency expressed
			       as a fraction of the total number
			       of training documents


  public TfIdfMatrix transform(List<String>)

  	 	Generates a TfIdfMatrix based on the trained
		model.

  	 	List<String>  list of documents


  public TfIdfMatrix fitTransform(List<String>, int, float)

  	 	Performs both fit and transform steps.

  	 	List<String>  list of documents
		int	      min document frequency
			       i.e., the minimum number of documents
			       in which a word must appear to be
			       included in training set
		float	      max document frequency ratio
			       the max document frequency expressed
			       as a fraction of the toal number
			       of training documents


class TfIdfMatrix

  public final double[][] matrix    a tf-idf matrix
  
  public final List<String> words   list of words acting as an index to
  	       		      	    the columns of the matrix

  public int indexOf(String)	    returns the column index of a word

  public String wordAt(int)	    returns the word corresponding to
  	 			    a column


Known Issues
-------------------------------------------------------------------
The library also contains overloaded methods for fit(), transform(),
and fitTransform() that accept a folder path instead of a list
of documents, allowing the user to process an entire folder.  However,
the library does not return an index to the documents, and as they
are read in an indeterminate order, this is of limited value until
fixed.

The fit() and fitTransform() methods should be refactored to accept
a double rather than a float, because if you try to pass it a literal
you need to cast it first.