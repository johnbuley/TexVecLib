TexVecLib

This library allows for the transformation of a set of documents
to a tf-idf matrix.  The matrix can then be used as input for
the calculation of a cosine similarity matrix, for instance.
The output is in the form of a 2d-array, so it is agnostic
with respect to an external linear algebra library.

term frequency(word w|doc d) = |occurrences of w in d|
inverse doc frequency(word) = log(|set of docs| / |docs in which w occurs|)
tf-idf = tf * idf

Each row corresponds to a document, and each column corresponds
to a word.

So a word that occurs in many documents will have a low score
when it occurs, and a word that occurs in few documents will
have a high score.  This can be used as a basic keyword-extraction
criterion. 


Requirements for building
---------------------------------------------------------------
Java SDK 1.8
JUnit and JAMA for test module


Components
---------------------------------------------------------------
class TfIdfVectorizer

  public void fit(String, int, float)
  	      	
		Trains the model.
	
		String  	path to folder of documents
		int	      	min document frequency
			       	 i.e., the minimum number of documents 
			       	 in which a word must appear to be 
			       	 included in training set
		float	      	max document frequency ratio
			       	 the max document frequency expressed
			       	 as a fraction of the total number
			       	 of training documents


  public TfIdfMatrix transform(String)

 		Generates a TfIdfMatrix based on the trained
		model.

 		String  	path to folder of documents


  public TfIdfMatrix fitTransform(String, int, float)

  	 	Performs both fit and transform steps.

  	 	String  	path to folder of documents
		int	      	min document frequency
			       	 i.e., the minimum number of documents
			       	 in which a word must appear to be
			       	 included in training set
		float	      	max document frequency ratio
			       	 the max document frequency expressed
			       	 as a fraction of the toal number
			       	 of training documents

Library also offers overloaded methods for the above, accepting
DocumentSet instead of String.


class TfIdfMatrix

  public final double[][] matrix    a tf-idf matrix



  public int indexOf(String)	    returns the column index of a word

  public String wordAt(int)	    returns the word corresponding to
  	 			    a column

  public int getDocIndex(String)    returns the row index of a doc

  public String getDocAt(int)	    returns doc at row index


class Corpus

  public addDoc(SparseDoc)	    updates Corpus for new doc

  public filterValidTokens	    filters a collection of tokens to
	(int,double)	            be used for tf-idf calc

  public calcIdf()		    calculate idf for all known
                                    tokens in the corpus; not
                                    dependent on valid tokens


class DocumentSet

  public enum DocumentSetType	    if FIT, then corpus unlocked
                                    if TRANSFORM, corpus locked
                                    (no new tokens)


  public addFolder(String)	    add all text files in a folder
                                    to set

  public iterator()		    returns an iterator for the doc
	                            collection


class IntArrayAsBytes


class SparseDoc

  public addToken(int)		    given a unique token id, add token

  public DocIterator iterator()	    returns iterator which joins elements
                                    of two byte arrays: tokenIds and
                                    tokenCounts

  public void compress()	    dispose array index and resize byte
                                    arrays to minimum necessary
  